// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  email     String   @unique
  password  String
  events    Event[]  @relation("UserEvents")
}

model Event {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  name         String
  startOn      DateTime
  createdById  String
  description  String?
  streetNumber Int?
  street       String?
  zip          Int?
  bldg         String?
  isPrivate    Boolean     @default(false)
  status       EventStatus @default(DRAFT)
  rsvps        Rsvp[]
  createdBy    User        @relation("UserEvents", fields: [createdById], references: [id])

  @@unique([createdById, name])
}

model Attendee {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String
  rsvps     Rsvp[]
}

model Rsvp {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  attendeeId String?
  eventId    String?
  status     RsvpStatus @default(GOING)
  attendee   Attendee?  @relation(fields: [attendeeId], references: [id])
  event      Event?     @relation(fields: [eventId], references: [id])

  @@unique([attendeeId, eventId])
}

enum EventStatus {
  DRAFT
  LIVE
  STARTED
  ENDED
  CANCELED
}

enum RsvpStatus {
  GOING
  NOT_GOING
  MAYBE
}
